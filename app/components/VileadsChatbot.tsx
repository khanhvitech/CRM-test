'use client'

import { useState, useRef, useEffect } from 'react'
import { 
  Bot,
  Send,
  X,
  Minimize2,
  Maximize2,
  User,
  FileText,
  Package,
  Zap,
  MessageSquare,
  Clock,
  CheckCircle,
  Copy,
  Download,
  Sparkles,
  Brain,
  Settings,
  HelpCircle,
  Search,
  Plus,
  ArrowRight,
  ChevronUp,
  ChevronDown
} from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { Card, CardContent } from '@/components/ui/card'

interface Message {
  id: string
  content: string
  sender: 'user' | 'bot'
  timestamp: Date
  type?: 'text' | 'contract' | 'product' | 'suggestion'
  data?: any
}

interface QuickAction {
  id: string
  label: string
  icon: any
  description: string
  category: 'contract' | 'product' | 'ai' | 'support'
  color: string
}

const quickActions: QuickAction[] = [
  {
    id: 'create-contract',
    label: 'T·∫°o h·ª£p ƒë·ªìng nhanh',
    icon: FileText,
    description: 'T·∫°o h·ª£p ƒë·ªìng t·ª´ template v·ªõi AI',
    category: 'contract',
    color: 'bg-blue-100 text-blue-700 hover:bg-blue-200'
  },
  {
    id: 'product-info',
    label: 'Th√¥ng tin s·∫£n ph·∫©m',
    icon: Package,
    description: 'H·ªèi v·ªÅ t√≠nh nƒÉng, gi√° c·∫£ s·∫£n ph·∫©m',
    category: 'product',
    color: 'bg-green-100 text-green-700 hover:bg-green-200'
  },
  {
    id: 'ai-analysis',
    label: 'Ph√¢n t√≠ch AI',
    icon: Brain,
    description: 'Ph√¢n t√≠ch d·ªØ li·ªáu v√† ƒë∆∞a ra insights',
    category: 'ai',
    color: 'bg-purple-100 text-purple-700 hover:bg-purple-200'
  },
  {
    id: 'quick-support',
    label: 'H·ªó tr·ª£ nhanh',
    icon: Zap,
    description: 'Gi·∫£i ƒë√°p th·∫Øc m·∫Øc, h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng',
    category: 'support',
    color: 'bg-yellow-100 text-yellow-700 hover:bg-yellow-200'
  }
]

const sampleContracts = [
  { id: 1, name: 'H·ª£p ƒë·ªìng B√°n h√†ng B2B', type: 'B√°n h√†ng', duration: '12 th√°ng' },
  { id: 2, name: 'H·ª£p ƒë·ªìng D·ªãch v·ª• CRM', type: 'D·ªãch v·ª•', duration: '6 th√°ng' },
  { id: 3, name: 'H·ª£p ƒë·ªìng Thu√™ bao Software', type: 'Subscription', duration: 'H√†ng nƒÉm' }
]

const sampleProducts = [
  { 
    id: 1, 
    name: 'CRM Pro', 
    price: '2,500,000 VND/th√°ng', 
    features: ['Qu·∫£n l√Ω Lead', 'T·ª± ƒë·ªông h√≥a Sales', 'B√°o c√°o AI', 'T√≠ch h·ª£p Zalo/FB'] 
  },
  { 
    id: 2, 
    name: 'CRM Enterprise', 
    price: '5,000,000 VND/th√°ng', 
    features: ['T·∫•t c·∫£ t√≠nh nƒÉng Pro', 'Custom workflow', 'API kh√¥ng gi·ªõi h·∫°n', 'Support 24/7'] 
  },
  { 
    id: 3, 
    name: 'CRM Starter', 
    price: '500,000 VND/th√°ng', 
    features: ['Qu·∫£n l√Ω c∆° b·∫£n', '1000 leads/th√°ng', 'B√°o c√°o c∆° b·∫£n', 'Email support'] 
  }
]

export default function VileadsChatbot() {
  const [isOpen, setIsOpen] = useState(false)
  const [isMinimized, setIsMinimized] = useState(false)
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      content: 'üëã Xin ch√†o! T√¥i l√† Tr·ª£ l√Ω Vileads. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t·∫°o h·ª£p ƒë·ªìng nhanh, t√¨m hi·ªÉu s·∫£n ph·∫©m, ph√¢n t√≠ch d·ªØ li·ªáu v√† nhi·ªÅu t√≠nh nƒÉng AI kh√°c. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay?',
      sender: 'bot',
      timestamp: new Date(),
      type: 'text'
    }
  ])
  const [inputValue, setInputValue] = useState('')
  const [isTyping, setIsTyping] = useState(false)
  const [showQuickActions, setShowQuickActions] = useState(true)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const addMessage = (content: string, sender: 'user' | 'bot', type: 'text' | 'contract' | 'product' | 'suggestion' = 'text', data?: any) => {
    const newMessage: Message = {
      id: Date.now().toString(),
      content,
      sender,
      timestamp: new Date(),
      type,
      data
    }
    setMessages(prev => [...prev, newMessage])
  }

  const simulateTyping = () => {
    setIsTyping(true)
    setTimeout(() => {
      setIsTyping(false)
    }, 1000 + Math.random() * 1000)
  }

  const handleSendMessage = () => {
    if (!inputValue.trim()) return
    
    addMessage(inputValue, 'user')
    setInputValue('')
    setShowQuickActions(false)
    
    simulateTyping()
    
    // Simulate AI response
    setTimeout(() => {
      const response = generateAIResponse(inputValue)
      addMessage(response.content, 'bot', response.type, response.data)
    }, 1500)
  }

  const generateAIResponse = (userInput: string): { content: string, type: 'text' | 'contract' | 'product' | 'suggestion', data?: any } => {
    const input = userInput.toLowerCase()
    
    if (input.includes('h·ª£p ƒë·ªìng') || input.includes('contract')) {
      return {
        content: 'üìã T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t·∫°o h·ª£p ƒë·ªìng nhanh. D∆∞·ªõi ƒë√¢y l√† c√°c template c√≥ s·∫µn:',
        type: 'contract',
        data: sampleContracts
      }
    }
    
    if (input.includes('s·∫£n ph·∫©m') || input.includes('gi√°') || input.includes('t√≠nh nƒÉng')) {
      return {
        content: 'üì¶ ƒê√¢y l√† th√¥ng tin c√°c s·∫£n ph·∫©m CRM c·ªßa ch√∫ng t√¥i:',
        type: 'product',
        data: sampleProducts
      }
    }
    
    if (input.includes('ph√¢n t√≠ch') || input.includes('ai') || input.includes('d·ªØ li·ªáu')) {
      return {
        content: 'üß† T√¥i c√≥ th·ªÉ gi√∫p ph√¢n t√≠ch d·ªØ li·ªáu c·ªßa b·∫°n. M·ªôt s·ªë insights t·ª´ h·ªá th·ªëng:\n\n‚Ä¢ Doanh thu th√°ng n√†y tƒÉng 15.3%\n‚Ä¢ T·ª∑ l·ªá chuy·ªÉn ƒë·ªïi lead tƒÉng 8.7%\n‚Ä¢ Facebook Ads c√≥ ROI cao nh·∫•t (3.2x)\n‚Ä¢ C·∫ßn t·ªëi ∆∞u th·ªùi gian ph·∫£n h·ªìi lead (hi·ªán t·∫°i 2.5h)',
        type: 'suggestion'
      }
    }
    
    if (input.includes('lead') || input.includes('kh√°ch h√†ng')) {
      return {
        content: 'üë• V·ªÅ qu·∫£n l√Ω leads:\n\n‚Ä¢ Hi·ªán c√≥ 254 leads m·ªõi th√°ng n√†y\n‚Ä¢ 73.2% ƒë√£ ƒë∆∞·ª£c li√™n h·ªá\n‚Ä¢ Top ngu·ªìn: Facebook (24.5%), Google (18.2%), Zalo (15.3%)\n‚Ä¢ Giai ƒëo·∫°n c·∫ßn ch√∫ √Ω: "B√°o gi√°" (conversion rate th·∫•p)',
        type: 'suggestion'
      }
    }
    
    if (input.includes('b√°o c√°o') || input.includes('report')) {
      return {
        content: 'üìä T√¥i c√≥ th·ªÉ t·∫°o b√°o c√°o t·ª± ƒë·ªông cho b·∫°n:\n\n‚Ä¢ B√°o c√°o doanh s·ªë h√†ng ng√†y\n‚Ä¢ Ph√¢n t√≠ch hi·ªáu qu·∫£ marketing\n‚Ä¢ B√°o c√°o chuy·ªÉn ƒë·ªïi lead\n‚Ä¢ D·ª± b√°o doanh thu\n\nB·∫°n mu·ªën b√°o c√°o n√†o?',
        type: 'suggestion'
      }
    }
    
    // Default response with suggestions
    return {
      content: 'ü§ñ T√¥i hi·ªÉu b·∫°n ƒëang c·∫ßn h·ªó tr·ª£. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\n‚Ä¢ T·∫°o h·ª£p ƒë·ªìng t·ª´ template\n‚Ä¢ T√¨m hi·ªÉu s·∫£n ph·∫©m v√† gi√° c·∫£\n‚Ä¢ Ph√¢n t√≠ch d·ªØ li·ªáu kinh doanh\n‚Ä¢ T·∫°o b√°o c√°o t·ª± ƒë·ªông\n‚Ä¢ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng t√≠nh nƒÉng\n\nH√£y n√≥i c·ª• th·ªÉ h∆°n v·ªÅ ƒëi·ªÅu b·∫°n c·∫ßn nh√©!',
      type: 'suggestion'
    }
  }

  const handleQuickAction = (action: QuickAction) => {
    setShowQuickActions(false)
    addMessage(`T√¥i mu·ªën ${action.label.toLowerCase()}`, 'user')
    
    simulateTyping()
    
    setTimeout(() => {
      const response = generateAIResponse(action.label)
      addMessage(response.content, 'bot', response.type, response.data)
    }, 1500)
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
    // Could add a toast notification here
  }

  const renderMessage = (message: Message) => {
    const isBot = message.sender === 'bot'
    
    return (
      <div key={message.id} className={`flex ${isBot ? 'justify-start' : 'justify-end'} mb-4`}>
        <div className={`flex max-w-[80%] ${isBot ? 'flex-row' : 'flex-row-reverse'}`}>
          <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${isBot ? 'bg-blue-500 mr-3' : 'bg-gray-500 ml-3'}`}>
            {isBot ? <Bot className="w-4 h-4 text-white" /> : <User className="w-4 h-4 text-white" />}
          </div>
          
          <div className={`rounded-lg px-4 py-3 ${isBot ? 'bg-gray-100 text-gray-800' : 'bg-blue-500 text-white'}`}>
            <div className="whitespace-pre-wrap">{message.content}</div>
            
            {/* Render special content based on message type */}
            {message.type === 'contract' && message.data && (
              <div className="mt-3 space-y-2">
                {message.data.map((contract: any) => (
                  <Card key={contract.id} className="cursor-pointer hover:bg-gray-50">
                    <CardContent className="p-3">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="font-medium text-sm">{contract.name}</p>
                          <p className="text-xs text-gray-500">{contract.type} ‚Ä¢ {contract.duration}</p>
                        </div>
                        <Button size="sm" variant="outline">
                          <FileText className="w-3 h-3 mr-1" />
                          T·∫°o
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            )}
            
            {message.type === 'product' && message.data && (
              <div className="mt-3 space-y-3">
                {message.data.map((product: any) => (
                  <Card key={product.id} className="cursor-pointer hover:bg-gray-50">
                    <CardContent className="p-3">
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <p className="font-medium text-sm">{product.name}</p>
                          <p className="text-blue-600 font-semibold text-sm">{product.price}</p>
                          <div className="mt-2 space-y-1">
                            {product.features.slice(0, 2).map((feature: string, idx: number) => (
                              <Badge key={idx} variant="secondary" className="text-xs mr-1">
                                {feature}
                              </Badge>
                            ))}
                            {product.features.length > 2 && (
                              <Badge variant="outline" className="text-xs">
                                +{product.features.length - 2} t√≠nh nƒÉng
                              </Badge>
                            )}
                          </div>
                        </div>
                        <Button size="sm" variant="outline">
                          <Package className="w-3 h-3 mr-1" />
                          Chi ti·∫øt
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            )}
            
            <div className="flex items-center justify-between mt-2">
              <span className="text-xs opacity-70">
                {message.timestamp.toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' })}
              </span>
              {isBot && (
                <Button
                  size="sm"
                  variant="ghost"
                  className="h-6 w-6 p-0 opacity-50 hover:opacity-100"
                  onClick={() => copyToClipboard(message.content)}
                >
                  <Copy className="w-3 h-3" />
                </Button>
              )}
            </div>
          </div>
        </div>
      </div>
    )
  }

  if (!isOpen) {
    return (
      <div className="fixed bottom-6 right-6 z-50">
        <Button
          onClick={() => setIsOpen(true)}
          className="bg-blue-500 hover:bg-blue-600 text-white rounded-full w-14 h-14 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105"
        >
          <Bot className="w-6 h-6" />
        </Button>
        <div className="absolute -top-12 right-0 bg-gray-800 text-white px-3 py-1 rounded-lg text-sm whitespace-nowrap opacity-0 hover:opacity-100 transition-opacity">
          Tr·ª£ l√Ω Vileads
        </div>
      </div>
    )
  }

  return (
    <div className={`fixed bottom-6 right-6 z-50 bg-white rounded-lg shadow-xl border transition-all duration-300 ${
      isMinimized ? 'w-80 h-16' : 'w-96 h-[600px]'
    }`}>
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-t-lg">
        <div className="flex items-center space-x-3">
          <div className="w-8 h-8 bg-white bg-opacity-20 rounded-full flex items-center justify-center">
            <Bot className="w-5 h-5" />
          </div>
          <div>
            <h3 className="font-semibold text-sm">Tr·ª£ l√Ω Vileads</h3>
            <p className="text-xs opacity-80">AI Assistant</p>
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <Button
            size="sm"
            variant="ghost"
            className="text-white hover:bg-white hover:bg-opacity-20 h-8 w-8 p-0"
            onClick={() => setIsMinimized(!isMinimized)}
          >
            {isMinimized ? <Maximize2 className="w-4 h-4" /> : <Minimize2 className="w-4 h-4" />}
          </Button>
          <Button
            size="sm"
            variant="ghost"
            className="text-white hover:bg-white hover:bg-opacity-20 h-8 w-8 p-0"
            onClick={() => setIsOpen(false)}
          >
            <X className="w-4 h-4" />
          </Button>
        </div>
      </div>

      {!isMinimized && (
        <>
          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-4 h-[440px]">
            {showQuickActions && (
              <div className="mb-6">
                <p className="text-sm text-gray-600 mb-3">üöÄ H√†nh ƒë·ªông nhanh:</p>
                <div className="grid grid-cols-2 gap-2">
                  {quickActions.map((action) => (
                    <Button
                      key={action.id}
                      variant="outline"
                      size="sm"
                      className={`${action.color} border-0 h-auto p-3 flex flex-col items-start text-left`}
                      onClick={() => handleQuickAction(action)}
                    >
                      <action.icon className="w-4 h-4 mb-1" />
                      <span className="font-medium text-xs">{action.label}</span>
                      <span className="text-xs opacity-80">{action.description}</span>
                    </Button>
                  ))}
                </div>
              </div>
            )}
            
            {messages.map(renderMessage)}
            
            {isTyping && (
              <div className="flex justify-start mb-4">
                <div className="flex items-center space-x-3">
                  <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                    <Bot className="w-4 h-4 text-white" />
                  </div>
                  <div className="bg-gray-100 rounded-lg px-4 py-3">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                  </div>
                </div>
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </div>

          {/* Input */}
          <div className="p-4 border-t">
            <div className="flex items-center space-x-2">
              <Input
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                placeholder="Nh·∫≠p tin nh·∫Øn..."
                className="flex-1"
                onKeyPress={(e) => {
                  if (e.key === 'Enter') {
                    handleSendMessage()
                  }
                }}
              />
              <Button
                onClick={handleSendMessage}
                disabled={!inputValue.trim() || isTyping}
                className="bg-blue-500 hover:bg-blue-600"
              >
                <Send className="w-4 h-4" />
              </Button>
            </div>
            
            {!showQuickActions && (
              <Button
                variant="ghost"
                size="sm"
                className="mt-2 text-xs text-gray-500 hover:text-gray-700"
                onClick={() => setShowQuickActions(true)}
              >
                <Sparkles className="w-3 h-3 mr-1" />
                Hi·ªán h√†nh ƒë·ªông nhanh
              </Button>
            )}
          </div>
        </>
      )}
    </div>
  )
}
